{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Husei\\\\aubify\\\\Frontend\\\\src\\\\components\\\\SigninSignup\\\\SigninSignup.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./SigninSignup.css\";\nimport { useUser } from \"../../UserContext\"; // Go up two levels\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SigninSignup({\n  user,\n  setUser\n}) {\n  _s();\n  const [activeContainer, setActiveContainer] = useState(\"\");\n  const [signupName, setSignupName] = useState(\"\");\n  const [signupEmail, setSignupEmail] = useState(\"\");\n  const [signupPassword, setSignupPassword] = useState(\"\");\n  const [signupError, setSignupError] = useState(\"\");\n  const [signinEmail, setSigninEmail] = useState(\"\");\n  const [signinPassword, setSigninPassword] = useState(\"\");\n  const [signinError, setSigninError] = useState(\"\");\n  const {\n    setUsername,\n    setIsAdmin\n  } = useUser();\n  const navigate = useNavigate();\n\n  // Function to check if the user is an admin based on email\n  const isAdminUser = email => {\n    const adminEmails = [\"ofa15@mail.aub.edu\", \"hmh97@mail.aub.edu\"]; // Define admin emails\n    return adminEmails.includes(email); // Check if email is in the admin list\n  };\n  const handleRegisterClick = () => {\n    setActiveContainer(\"active\");\n    setSignupError(\"\");\n  };\n  const handleSigninClick = () => {\n    setActiveContainer(\"\");\n    setSigninError(\"\");\n  };\n  const checkUserExists = async email => {\n    try {\n      const response = await axios.post(\"/checkUserExists\", {\n        email\n      });\n      if (response.status !== 200) {\n        throw new Error(\"Network response was not ok.\");\n      }\n      return response.data.exists; // Assuming the response contains a boolean value indicating user existence\n    } catch (error) {\n      return false;\n    }\n  };\n  const checkPassword = async (email, password) => {\n    try {\n      const response = await axios.post(\"/checkPassword\", {\n        email,\n        password\n      });\n      if (response.status !== 200) {\n        throw new Error(\"Network response was not ok.\");\n      }\n      return response.data.correctPassword; // Assuming the response contains a boolean value indicating password correctness\n    } catch (error) {\n      console.error(\"Error checking password:\", error);\n      // Handle error, such as displaying a generic error message to the user\n      return false;\n    }\n  };\n  const checkUserVerified = async email => {\n    try {\n      const response = await axios.post(\"/checkUserVerified\", {\n        email\n      });\n      if (response.status !== 200) {\n        throw new Error(\"Network response was not ok.\");\n      }\n      return response.data.isVerified; // Assuming the response contains a boolean value indicating user verification status\n    } catch (error) {\n      console.error(\"Error checking user verification status:\", error);\n      // Handle error, such as displaying a generic error message to the user\n      return false;\n    }\n  };\n  const saveUserData = async (name, email, password) => {\n    try {\n      const response = await axios.post(\"/saveUserData\", {\n        name: name,\n        email: email,\n        password: password\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.status !== 200) {\n        throw new Error(\"Network response was not ok.\");\n      }\n      console.log(\"User data saved successfully!\");\n    } catch (error) {\n      console.error(\"Error saving user data:\", error.response ? error.response.data : error.message);\n    }\n  };\n  const handleSignup = async e => {\n    e.preventDefault();\n    // Clear previous errors\n    setSignupError(\"\");\n\n    // Check if name is empty\n    if (!signupName.trim()) {\n      setSignupError(\"Name is required.\");\n      return;\n    }\n\n    // Client-side validation\n    if (!isValidEmail(signupEmail)) {\n      setSignupError(\"Invalid email format. Please use your AUB student email.\");\n      return;\n    }\n    if (!isValidPassword(signupPassword)) {\n      setSignupError(\"Password must be at least 8 characters long and contain at least one uppercase letter, one number, and one special character.\");\n      return;\n    }\n\n    // Check if user already exists\n    const userExists = await checkUserExists(signupEmail);\n    if (userExists) {\n      setSignupError(\"User already exists. Please Signin.\");\n      return;\n    }\n\n    // Check if user is admin based on email\n    const adminStatus = isAdminUser(signupEmail);\n    setIsAdmin(adminStatus);\n    // localStorage.setItem('isAdmin', adminStatus ? 'true' : 'false');\n\n    navigate(\"/email_verification\");\n    await saveUserData(signupName, signupEmail, signupPassword);\n    localStorage.setItem(\"userEmail\", signupEmail);\n\n    // After saving user data but before navigating\n    try {\n      const response = await axios.post(\"/handleSignup\", {\n        email: signupEmail\n      }); // Use signupEmail here\n\n      if (response.status !== 200) {\n        throw new Error(\"Failed to fetch user data\");\n      }\n      if (response.data.success) {\n        // Save username in localStorage\n        localStorage.setItem(\"username\", response.data.userName);\n        setUsername(response.data.userName); // This assumes setUsername is the method to update context or state\n\n        // Check if the user's email is verified\n        if (response.data.emailVerified) {\n          // Navigate to homepage or proceed as verified user\n          navigate(\"/homepage\");\n        }\n      } else {\n        // Handle case where user data is not returned or another error occurred\n        setSignupError(response.data.message || \"Failed to get user data. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching user data:\", error);\n      setSignupError(\"An error occurred. Please try again.\");\n    }\n  };\n  const handleSignin = async e => {\n    e.preventDefault();\n    setSigninError(\"\"); // Clear previous errors\n\n    // Client-side validation\n    if (!isValidEmail(signinEmail)) {\n      setSigninError(\"Invalid email format. Please use your AUB student email.\");\n      return;\n    }\n\n    // Check if user exists\n    const userExists = await checkUserExists(signinEmail);\n    if (!userExists) {\n      setSigninError(\"User does not exist. Please sign up.\");\n      return;\n    }\n\n    // Check if the password is correct\n    const correctPassword = await checkPassword(signinEmail, signinPassword);\n    if (!correctPassword) {\n      setSigninError(\"Incorrect password.\");\n      return;\n    }\n\n    // Check if the user is verified\n    const isVerified = await checkUserVerified(signinEmail);\n    if (!isVerified) {\n      navigate(\"/email_verification\");\n      return;\n    }\n    localStorage.setItem(\"userEmail\", signinEmail);\n    // Proceed with login if user exists, password is correct, and user is verified\n    try {\n      const response = await axios.post(\"/handleSignin\", {\n        email: signinEmail\n      });\n      if (response.status !== 200) {\n        throw new Error(\"Failed to fetch username\");\n      }\n      if (response.data.success && response.data.userName) {\n        // Assuming setUsername updates the username in your global state/context\n        setUsername(response.data.userName); // Update username in context with the name fetched from backend\n        const username = response.data.userName; // Make sure to extract the username from the response or based on your logic\n        localStorage.setItem(\"username\", username); // Save username to localStorage\n\n        // Check if user is admin based on email\n        const adminStatus = isAdminUser(signinEmail);\n        setIsAdmin(adminStatus);\n        // localStorage.setItem('isAdmin', adminStatus ? 'true' : 'false');\n\n        navigate(\"/homepage\"); // Navigate to homepage after successful sign-in\n      } else {\n        // Handle case where username is not found or another error occurred\n        setSigninError(\"Failed to get username. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching username:\", error);\n      setSigninError(\"An error occurred. Please try again.\");\n    }\n  };\n  const handlePasswordChange = e => {\n    setSignupPassword(e.target.value);\n    // Clear previous errors when password is being corrected\n    setSignupError(\"\");\n  };\n\n  // Function to validate email format\n  const isValidEmail = email => {\n    const emailRegex = /^[a-z]{3}\\d{2,3}@mail\\.aub\\.edu$/;\n    return emailRegex.test(email);\n  };\n\n  // Function to validate password format\n  const isValidPassword = password => {\n    const passwordRegex = /^(?=.*[A-Z])(?=.*\\d)(?=.*[,~!@#$%^&*()[\\]{}:;\"'.,<>?/|])[A-Za-z\\d,~!@#$%^&*()[\\]{}:;\"'.,<>?/|]{8,}$/;\n    return passwordRegex.test(password);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"signin-signup-main-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `signin-signup-container ${activeContainer}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container sign-up\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSignup,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Create Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Name\",\n            value: signupName,\n            onChange: e => setSignupName(e.target.value),\n            required: true,\n            maxLength: 25\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"Email\",\n            value: signupEmail,\n            onChange: e => setSignupEmail(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Password\",\n            value: signupPassword,\n            onChange: handlePasswordChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this), signupError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error\",\n            children: signupError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container sign-in\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSignin,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"Email\",\n            value: signinEmail,\n            onChange: e => setSigninEmail(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Password\",\n            value: signinPassword,\n            onChange: e => setSigninPassword(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this), signinError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error\",\n            children: signinError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `toggle-panel toggle-left ${activeContainer}`,\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Welcome Back!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Sign In to use all platform features\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"hidden\",\n              onClick: handleSigninClick,\n              children: \"Sign In\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `toggle-panel toggle-right ${activeContainer}`,\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Hello, Student!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Sign Up to use all site features and make sure to use your AUB email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"hidden\",\n              onClick: handleRegisterClick,\n              children: \"Sign Up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n}\n_s(SigninSignup, \"+YfzmkEb1rHJ2XDmipGh33UoHbc=\", false, function () {\n  return [useUser, useNavigate];\n});\n_c = SigninSignup;\nexport default SigninSignup;\nvar _c;\n$RefreshReg$(_c, \"SigninSignup\");","map":{"version":3,"names":["React","useState","useNavigate","useUser","axios","jsxDEV","_jsxDEV","SigninSignup","user","setUser","_s","activeContainer","setActiveContainer","signupName","setSignupName","signupEmail","setSignupEmail","signupPassword","setSignupPassword","signupError","setSignupError","signinEmail","setSigninEmail","signinPassword","setSigninPassword","signinError","setSigninError","setUsername","setIsAdmin","navigate","isAdminUser","email","adminEmails","includes","handleRegisterClick","handleSigninClick","checkUserExists","response","post","status","Error","data","exists","error","checkPassword","password","correctPassword","console","checkUserVerified","isVerified","saveUserData","name","headers","log","message","handleSignup","e","preventDefault","trim","isValidEmail","isValidPassword","userExists","adminStatus","localStorage","setItem","success","userName","emailVerified","handleSignin","username","handlePasswordChange","target","value","emailRegex","test","passwordRegex","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","required","maxLength","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Husei/aubify/Frontend/src/components/SigninSignup/SigninSignup.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./SigninSignup.css\";\nimport { useUser } from \"../../UserContext\"; // Go up two levels\nimport axios from \"axios\";\n\nfunction SigninSignup({ user, setUser }) {\n  const [activeContainer, setActiveContainer] = useState(\"\");\n  const [signupName, setSignupName] = useState(\"\");\n  const [signupEmail, setSignupEmail] = useState(\"\");\n  const [signupPassword, setSignupPassword] = useState(\"\");\n  const [signupError, setSignupError] = useState(\"\");\n  const [signinEmail, setSigninEmail] = useState(\"\");\n  const [signinPassword, setSigninPassword] = useState(\"\");\n  const [signinError, setSigninError] = useState(\"\");\n  const { setUsername, setIsAdmin } = useUser();\n  const navigate = useNavigate();\n\n  // Function to check if the user is an admin based on email\n  const isAdminUser = (email) => {\n    const adminEmails = [\"ofa15@mail.aub.edu\", \"hmh97@mail.aub.edu\"]; // Define admin emails\n    return adminEmails.includes(email); // Check if email is in the admin list\n  };\n\n  const handleRegisterClick = () => {\n    setActiveContainer(\"active\");\n    setSignupError(\"\");\n  };\n\n  const handleSigninClick = () => {\n    setActiveContainer(\"\");\n    setSigninError(\"\");\n  };\n\n  const checkUserExists = async (email) => {\n    try {\n      const response = await axios.post(\"/checkUserExists\", { email });\n      if (response.status !== 200) {\n        throw new Error(\"Network response was not ok.\");\n      }\n      return response.data.exists; // Assuming the response contains a boolean value indicating user existence\n    } catch (error) {\n      return false;\n    }\n  };\n\n  const checkPassword = async (email, password) => {\n    try {\n      const response = await axios.post(\"/checkPassword\", { email, password });\n\n      if (response.status !== 200) {\n        throw new Error(\"Network response was not ok.\");\n      }\n      return response.data.correctPassword; // Assuming the response contains a boolean value indicating password correctness\n    } catch (error) {\n      console.error(\"Error checking password:\", error);\n      // Handle error, such as displaying a generic error message to the user\n      return false;\n    }\n  };\n\n  const checkUserVerified = async (email) => {\n    try {\n      const response = await axios.post(\"/checkUserVerified\", { email });\n\n      if (response.status !== 200) {\n        throw new Error(\"Network response was not ok.\");\n      }\n\n      return response.data.isVerified; // Assuming the response contains a boolean value indicating user verification status\n    } catch (error) {\n      console.error(\"Error checking user verification status:\", error);\n      // Handle error, such as displaying a generic error message to the user\n      return false;\n    }\n  };\n\n  const saveUserData = async (name, email, password) => {\n    try {\n      const response = await axios.post(\n        \"/saveUserData\",\n        {\n          name: name,\n          email: email,\n          password: password,\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (response.status !== 200) {\n        throw new Error(\"Network response was not ok.\");\n      }\n      console.log(\"User data saved successfully!\");\n    } catch (error) {\n      console.error(\n        \"Error saving user data:\",\n        error.response ? error.response.data : error.message\n      );\n    }\n  };\n\n  const handleSignup = async (e) => {\n    e.preventDefault();\n    // Clear previous errors\n    setSignupError(\"\");\n\n    // Check if name is empty\n    if (!signupName.trim()) {\n      setSignupError(\"Name is required.\");\n      return;\n    }\n\n    // Client-side validation\n    if (!isValidEmail(signupEmail)) {\n      setSignupError(\n        \"Invalid email format. Please use your AUB student email.\"\n      );\n      return;\n    }\n    if (!isValidPassword(signupPassword)) {\n      setSignupError(\n        \"Password must be at least 8 characters long and contain at least one uppercase letter, one number, and one special character.\"\n      );\n      return;\n    }\n\n    // Check if user already exists\n    const userExists = await checkUserExists(signupEmail);\n    if (userExists) {\n      setSignupError(\"User already exists. Please Signin.\");\n      return;\n    }\n\n    // Check if user is admin based on email\n    const adminStatus = isAdminUser(signupEmail);\n    setIsAdmin(adminStatus);\n    // localStorage.setItem('isAdmin', adminStatus ? 'true' : 'false');\n\n    navigate(\"/email_verification\");\n\n    await saveUserData(signupName, signupEmail, signupPassword);\n    localStorage.setItem(\"userEmail\", signupEmail);\n\n    // After saving user data but before navigating\n    try {\n      const response = await axios.post(\"/handleSignup\", {\n        email: signupEmail,\n      }); // Use signupEmail here\n\n      if (response.status !== 200) {\n        throw new Error(\"Failed to fetch user data\");\n      }\n      if (response.data.success) {\n        // Save username in localStorage\n        localStorage.setItem(\"username\", response.data.userName);\n        setUsername(response.data.userName); // This assumes setUsername is the method to update context or state\n\n        // Check if the user's email is verified\n        if (response.data.emailVerified) {\n          // Navigate to homepage or proceed as verified user\n          navigate(\"/homepage\");\n        }\n      } else {\n        // Handle case where user data is not returned or another error occurred\n        setSignupError(\n          response.data.message || \"Failed to get user data. Please try again.\"\n        );\n      }\n    } catch (error) {\n      console.error(\"Error fetching user data:\", error);\n      setSignupError(\"An error occurred. Please try again.\");\n    }\n  };\n\n  const handleSignin = async (e) => {\n    e.preventDefault();\n    setSigninError(\"\"); // Clear previous errors\n\n    // Client-side validation\n    if (!isValidEmail(signinEmail)) {\n      setSigninError(\n        \"Invalid email format. Please use your AUB student email.\"\n      );\n      return;\n    }\n\n    // Check if user exists\n    const userExists = await checkUserExists(signinEmail);\n    if (!userExists) {\n      setSigninError(\"User does not exist. Please sign up.\");\n      return;\n    }\n\n    // Check if the password is correct\n    const correctPassword = await checkPassword(signinEmail, signinPassword);\n    if (!correctPassword) {\n      setSigninError(\"Incorrect password.\");\n      return;\n    }\n\n    // Check if the user is verified\n    const isVerified = await checkUserVerified(signinEmail);\n    if (!isVerified) {\n      navigate(\"/email_verification\");\n      return;\n    }\n\n    localStorage.setItem(\"userEmail\", signinEmail);\n    // Proceed with login if user exists, password is correct, and user is verified\n    try {\n      const response = await axios.post(\"/handleSignin\", {\n        email: signinEmail,\n      });\n\n      if (response.status !== 200) {\n        throw new Error(\"Failed to fetch username\");\n      }\n\n      if (response.data.success && response.data.userName) {\n        // Assuming setUsername updates the username in your global state/context\n        setUsername(response.data.userName); // Update username in context with the name fetched from backend\n        const username = response.data.userName; // Make sure to extract the username from the response or based on your logic\n        localStorage.setItem(\"username\", username); // Save username to localStorage\n\n        // Check if user is admin based on email\n        const adminStatus = isAdminUser(signinEmail);\n        setIsAdmin(adminStatus);\n        // localStorage.setItem('isAdmin', adminStatus ? 'true' : 'false');\n\n        navigate(\"/homepage\"); // Navigate to homepage after successful sign-in\n      } else {\n        // Handle case where username is not found or another error occurred\n        setSigninError(\"Failed to get username. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching username:\", error);\n      setSigninError(\"An error occurred. Please try again.\");\n    }\n  };\n\n  const handlePasswordChange = (e) => {\n    setSignupPassword(e.target.value);\n    // Clear previous errors when password is being corrected\n    setSignupError(\"\");\n  };\n\n  // Function to validate email format\n  const isValidEmail = (email) => {\n    const emailRegex = /^[a-z]{3}\\d{2,3}@mail\\.aub\\.edu$/;\n    return emailRegex.test(email);\n  };\n\n  // Function to validate password format\n  const isValidPassword = (password) => {\n    const passwordRegex =\n      /^(?=.*[A-Z])(?=.*\\d)(?=.*[,~!@#$%^&*()[\\]{}:;\"'.,<>?/|])[A-Za-z\\d,~!@#$%^&*()[\\]{}:;\"'.,<>?/|]{8,}$/;\n    return passwordRegex.test(password);\n  };\n\n  return (\n    <div className=\"signin-signup-main-container\">\n      <div className={`signin-signup-container ${activeContainer}`}>\n        <div className=\"form-container sign-up\">\n          <form onSubmit={handleSignup}>\n            <h1>Create Account</h1>\n            <input\n              type=\"text\"\n              placeholder=\"Name\"\n              value={signupName}\n              onChange={(e) => setSignupName(e.target.value)}\n              required\n              maxLength={25}\n            />\n            <input\n              type=\"email\"\n              placeholder=\"Email\"\n              value={signupEmail}\n              onChange={(e) => setSignupEmail(e.target.value)}\n              required\n            />\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              value={signupPassword}\n              onChange={handlePasswordChange}\n              required\n            />\n            <button type=\"submit\">Sign Up</button>\n            {signupError && <p className=\"error\">{signupError}</p>}\n          </form>\n        </div>\n        <div className=\"form-container sign-in\">\n          <form onSubmit={handleSignin}>\n            <h1>Sign In</h1>\n            <input\n              type=\"email\"\n              placeholder=\"Email\"\n              value={signinEmail}\n              onChange={(e) => setSigninEmail(e.target.value)}\n              required\n            />\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              value={signinPassword}\n              onChange={(e) => setSigninPassword(e.target.value)}\n              required\n            />\n            <button type=\"submit\">Sign In</button>\n            {signinError && <p className=\"error\">{signinError}</p>}\n          </form>\n        </div>\n        <div className=\"toggle-container\">\n          <div className=\"toggle\">\n            <div className={`toggle-panel toggle-left ${activeContainer}`}>\n              <h1>Welcome Back!</h1>\n              <p>Sign In to use all platform features</p>\n              <button className=\"hidden\" onClick={handleSigninClick}>\n                Sign In\n              </button>\n            </div>\n            <div className={`toggle-panel toggle-right ${activeContainer}`}>\n              <h1>Hello, Student!</h1>\n              <p>\n                Sign Up to use all site features and make sure to use your AUB\n                email\n              </p>\n              <button className=\"hidden\" onClick={handleRegisterClick}>\n                Sign Up\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SigninSignup;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}